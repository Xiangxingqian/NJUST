Android动画：动画是事物的属性随着时间的改变而改变
Android图画：一支画笔在一张画布上画画
Android的transition：活动之间转变时的展示动画
View：一个展示在屏幕上的物体。有大小、形状、颜色、动画、交互操作和中间状态等。
ObjectAnimator：属性动画。刻画一个View的属性随着时间的改变而改变
ViewAnimation：一般动画。刻画一个View的图片随着时间的改变而改变。 Attention：属性动画用Animator，而一般动画用Animation。
Animator.AnimatorListener：动画监听器，监听动画的开始、结束等状态。
AnimationSet or Animator：动画集合
AlphaAnimation: 透明度动画
TranslateAnimation: 平移动画(动画的起始位置是以当前View为(0,0))
Path: 路径，线性或非线性。可设置各种函数的path，起点为(0,0)
px: 像素
dip/dp: 物理像素 1dp = 1/160inch换算方式 px/总px=dp/总dp 总dp = 屏幕宽度*160 
onMeasure():根据内容的宽高画View的宽高，度量
MeasureSpec:度量规范，解决父容器和子View的宽高大小冲突问题。子View的大小三种模式：任意大小，使用parent指定的大小，最大不超过指定值。
Toggling: 切换
Instance State: View，Fragment，Activity都可以包含多个状态，当外部条件改变时，如来了一个电话，app应保存状态信息以备状态resume展示。
保存当前状态，接着上一个保存的状态执行。怎么保存状态呢？用bundle。
Bundle：一捆脏东西, 好好研究⭐️⭐️⭐️
ProgressBar: 刻画进度随着时间的改变而改变的View。表现方式可以是圆[0,360]，进度条[0,100]，五角星[空，满]
onDraw(): 何时执行
内部类：就是一般被当前类使用的一般类
样式：对组件的显示样式进行控制，如改变文本的颜色和大小等
主题：对窗口外观进行控制，如设置窗口的背景色等。不再是外观。而是给一个容器内的元素定义统一的样式。如给Application定义的theme会用在Activity上，而对LinearLayout定义的theme会应用到其子view上。
AppCompat包：适用于所有API版本的Activity，主流Activity。
DrawerLayout: 至多包含三个root view的抽屉式布局。位于第一个位置的View为主ContentView，第二个位于左边，第三个位于右边。
AppBarLayout: 是一个布局方向为垂直方向的LinearLayout，比LinearLayout多了一个app:layout_scrollFlags，支持连带滚动。当某个scrollView发生滚动时，
包含app:layout_scrollFlags的View也会发生改变。
ToolBar：一个可以显示标题，子标题，logo，menu等的ViewGroup
CollapsingToolbarLayout：AppBarLayout的加强版，强调toolbar和scrollView的关联性。并且可以控制toolBar的滚动速度。固定toolbar。
Android沉浸式模式：全屏化
?@区别：@指向style，color等，?指向attr
attr: 如textColor，如果不设置，会取一个默认的颜色，同理，如果 android:textColor="?android:attr/textColor" 照样会设置一个颜色。
线程安全：多线程访问某个元素时，采用加锁机制，保证多个线程不能同时修改元素内容。
UI线程：UI线程的主要工作是绘制UI和分发事件。当耗时操作运行在UI线程时，会导致线程阻塞，无法分发事件，即卡顿现象。因此不能将耗时运行在UI线程之中。另外由于UI线程是不安全的，因此不要在非UI线程中绘制UI。


context:
resources:
displaymetric:
display:
WindowManager:
Window:




