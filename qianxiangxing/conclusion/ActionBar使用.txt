Extended ActionBar Guide笔记
是什么？
是一个位于屏幕顶部的，包含许多导航View的bar。AppCompatActivity是一个适用于所有版本的Activity。
用法：
1、actionBar可以在底部
2、给actionBar添加ActionView和SearchView。
3、管理元素顺序
4、ActionProvider和ShareActionProvider的使用。
5、Home Icon
6、Inflating menu

二、设置AppCompatActivity是一个兼容所有版本的Activity，包含fragment和actionBar。
⭐️⭐️⭐️app:showAsAction和android:showAsAction的区别？
⭐️⭐️⭐️Theme和Style的区别？

三、给ActionBar设置Menu？
只需要getMenuInflater().inflate(R.menu.menu_main, menu);即可

四、顺序？
android:orderInCategory="200" 数字越小，优先级越高

五、自定义ActionBar样式

ActionBar的样式受manifest中的<application><android:theme />控制 TODO

<resources>

    <!-- Define your colors in `res/values/colors.xml` -->
    <color name="simple_yellow">#ECD078</color>
    <color name="primary_blue">#53777A</color>

    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <item name="android:actionBarStyle">@style/MyActionBar</item>
        <item name="android:actionBarTabTextStyle">@style/MyActionBarTabText</item>

        <!-- Support library compatibility -->
        <item name="actionBarStyle">@style/MyActionBar</item>
        <item name="actionBarTabTextStyle">@style/MyActionBarTabText</item>
    </style>

    <style name="MyActionBar" parent="@style/Widget.AppCompat.Light.ActionBar.Solid.Inverse">
        <item name="android:background">@color/simple_yellow</item>
        <item name="android:titleTextStyle">@style/MyActionBar.TitleTextStyle</item>

        <!-- Support library compatibility -->
        <item name="background">@color/simple_yellow</item>
        <item name="titleTextStyle">@style/MyActionBar.TitleTextStyle</item>
    </style>

    <style name="MyActionBar.TitleTextStyle"
        parent="@style/TextAppearance.AppCompat.Widget.ActionBar.Title">
        <item name="android:textColor">@color/primary_blue</item>
    </style>

    <style name="MyActionBarTabText" parent="@style/Widget.AppCompat.ActionBar.TabText">
        <item name="android:textColor">@color/primary_blue</item>
    </style>

</resources>


六、自定义ActionBar布局
与Dialog，Toast类似，actionBar也可以自定义布局，只需要
getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM); 
getSupportActionBar().setCustomView(R.layout.actionbar_title);

七、ActionView
ActionView是一个有多种表现形式的View，如SearchView+EditText，当search icon被点击时，弹出EditText。响应Action的View。

八、SearchView
点击搜索，弹出edittext

九、ActionProvider
一组view容器，包含submenu。

十、AppIcon被重命名为Up。
很奇怪。如果Activity包含Up，可以在Activity中指定其一个Activity做父类作为跳转，当Up icon被点击时，跳转到父类Activity。
<activity 
        android:name="com.example.myfirstapp.ChildActivity"
        android:label="@string/title_activity_display_message"
        android:parentActivityName="com.example.myfirstapp.ParentActivity" >
        <!-- Parent activity meta-data to support API level 7+ -->
        <meta-data
            android:name="android.support.PARENT_ACTIVITY"
            android:value="com.example.myfirstapp.ParentActivity" />
</activity>


十一、为Fragment配置ActionBar。
在onCreate中设置setHasOptionsMenu(true);
在onCreateOptionsMenu定义menu
    inflater.inflate(R.menu.my_menu, menu);
在onOptionsItemSelected中定义接受响应事件。注意activity也有onOptionsItemSelected方法，如果被activity处理了，理论上不会被fragment的onOptionsItemSelected方法处理。

