什么是计算机程序？
是一组指示计算机动作的指令，由某种程序设计语言编写，运行在某个目标体系之上。程序设计语言是易懂、易编写的，然而运行的时候必须将程序编译和链接成计算机语言，让其执行。
未经编译就可执行的程序通常称为脚本语言。（看完下面，这一条有待商榷）

什么叫编译呢？
传统意义上的编译和解释是指：程序代码何时被翻译成机器指令。
编译型语言如C语言，编译时就生成了目标文件，可以直接供CPU运行。这里强调CPU的概念，如果是根据ARM生成的目标代码不能在MIPS的CPU上运行，因此如果要在另外一种CPU上运行，就要重新编译。也就是不具有跨平台的特点。

解释型语言(如Java或python)，对Java是解释型语言，Java和Python都有编译过程，在他们编译生成的是一种CPU无关的代码，如字节码，因此换平台不需要重新编译，具有跨平台的特点。字节码会被JVM运行时编译成机器语言。

1，编译型语言在编译过程中生成目标平台的指令，解释型语言在运行过程中才生成目标平台的指令。
2，虚拟机的任务是在运行过程中将中间代码翻译成目标平台的指令。

程序运行：为了一个程序运行，计算机加载程序代码，还可能加载数据，从而初始化一个开始状态。在最底层上，由一个加载器开始的。

现在计算机系统在同一个时间内以进程的形式将多个程序加载到内存中，并使用时分复用的方式，顺序处理程序，但表现为平行运行的状态。
同理，使用多线程（每一个线程代表一个进程内的独立执行上下文），在多个CPU上同时运行。

TODO 多个线程可以在多个CPU上执行，那么一个程序包含多个进程能否在多个CPU上执行呢？

什么是进程？
用户下达程序执行的命令后，就会产生进程。同一个程序会产生多个进程(如何判断是启动一个进程还是多个进程？进程有没有负载的概念呢？)
一个进程包括下列数据：
1. 程序可运行机器码在内存的映像
2. 所在的内存，一块虚拟的内存区域。内存的内容包括：可运行的代码、特定于进程的数据、调用堆栈、堆栈。
3. 分配给改进程的资源的操作系统描述符，如文件描述符（Unix），或句柄（windows）、数据源和数据终端。、
4. 安全特性，注入进程拥有者和进程的权限集。
5. 处理器状态（内文），诸如寄存器内容、物理内存定址等。当进程正在运行时，状态通常存储在寄存器，其他情况在内存。


什么是资源？
进程的资源包括：CPU的使用时间、内存、文件以及I/O设备。





1. 多线程
多线程：一个程序包含多个线程。每个线程各有开始时间和结束时间。
线程是资源共享的。

程序：是指令、数据以及组织形式的描述。
什么是进程：进程是运行程序的实体，不是内存空间。

一个程序可以包含多个进程，每个进程协作完成任务。

TODO 线程和进程的区别？
TODO 一个程序为什么会有多个进程？

结论：
多线程同时操作一个对象，运行会有多种结果。因为一个线程的改动会被其他线程覆盖。

⭐️⭐️⭐️synchronized 用法总结⭐️⭐️⭐️
同步关键字修饰method和对象。
1. 修饰方法时，表示锁定这个同步方法的对象。
public synchronized void method(){
    //  
}

其他线程中无法执行该同步方法，并且若该类中的其他synchronized同步方法也无法执行。这种修饰等价于同步对象：
public void method()   {   
    synchronized (this)      
    {   
       //..   
    }   
}   

2. 修饰对象
public void method(SomeObject so) {   
   synchronized(so)   
   {   
        //..   
   }   
}  
注意，synchronized锁得是对象。因此如果多个线程引用同一个对象，即指向同一块内存空间，则锁定

3. 修饰静态函数或静态变量。
静态变量锁定的是Foo.class，而this锁定的是foo的实例。


Join方法
线程A调用线程B的join方法，表示A线程在等待B执行结束，实现同步。




2. 面向对象的三个基本特征：封装，继承和多态
封装：将客观事物抽象成类
继承：继承复用父类的方法
多态：重写父类的方法，重载方法。


