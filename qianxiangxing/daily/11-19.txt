服务：一个一直运行在后台的组件
运行在后台：没有界面；有目的
目的是什么：做持续的工作
线程可以做持续的工作，为什么不用线程?
线程会依赖活动，当活动被杀死后，线程无法会结束执行。

服务运行在UI线程中，因此不能做耗时操作。
如果要做耗时操作，必须另开线程执行。

由于服务运行在UI线程中，当内存不够时，服务有可能被杀死。
内存不够时，Android系统会选择性杀死某部分优先级比较低的应用程序。
并且减少内存占用较大的应用程序的内存，因此会对这些应用进行优化，处理掉额外的开销，保存最重要的模块。
因此，如果不设置Service的重要程度，当内存不足时，会自动kill Service。
而当内存有剩余时，又会重新启动这些Service。
当然，我们也可以设置Service的优先级，使之在内存不足时也不能被杀死。
于是就有了前台serveice的概念。

衍生的问题：
1. 一个应用程序可以有多个Service吗？Sure！
2. 前台Service不被杀死的原理是什么？设置优先级？


都说Service有两种使用方式：start和bind。有何不同？
start表示开启一个Service，Service只处理本类中的代码。
bind表示绑定，绑定Activity和Service。让Service启动后，执行一部分定义的代码。

我们知道Service是运行在UI线程中，那么远程service又是什么呢？
远程Service和活动生活在两个不同的进程中，因此不可能和活动在同一个线程中。
与普通Service相比，远程Service多开了一个进程，那么有哪些好处和坏处呢?
好处：可以在远程Service中处理耗时操作。
坏处：不同的进程代码不能相互关联，因此Activity不能与Service建立关联，因此导致Service不能使用bind的方式。

那如何在进程与进程之间建立关联呢？
使用AIDL进行跨进程通信（IPC--Inter-procedural communication）

AIDL的目地是让多个应用程序关联并共享一个Service进程。

AIDL是什么？有什么怎么使用呢？
AIDL定义了一些接口，如
package com.example.servicetest;  
interface MyAIDLService {  
    int plus(int a, int b);  
    String toUpperCase(String str);  
} 

在Service中，对他进行实现，如
MyAIDLService.Stub mBinder = new Stub() {  
  
        @Override  
        public String toUpperCase(String str) throws RemoteException {  
            if (str != null) {  
                return str.toUpperCase();  
            }  
            return null;  
        }  
  
        @Override  
        public int plus(int a, int b) throws RemoteException {  
            return a + b;  
        }  
    };  

我觉得AIDL转化成Java时，会定义一个Stub内部类，这个类是一个实现IBinder的子类。

在Activity，获取MyAIDLService实例
myAIDLService = MyAIDLService.Stub.asInterface(service)，根据IBinder获取Service，然后调用相关的方法。


又如何实现跨进程通信呢？这还不简单，调用implicit intent啊。











