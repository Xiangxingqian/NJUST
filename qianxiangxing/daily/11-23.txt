 ⭐️⭐️⭐️TCP、UDP、HTTP的区别？ ⭐️⭐️⭐️
这个问题拆分成两个问题：
1. 什么是TCP、UDP、Http？
2. 他们之间的异同点是什么？

> For 1 什么是TCP、UDP和HTTP呢？
他们都是互联网中传输数据用到的协议。

⭐️TCP
TCP的全称是：Transmission control protocol, 传输控制协议。是一种面向连接的，可靠的、基于字节流的传输层通信协议。
注意：这句话有两个重点：他是传输层通信协议，他具有面向连接的、可靠的、基于字节流的特点。往往我们会把最重要的概念传输层通信协议忽视掉，而重点落在他的特点上。

我们开始分析这句话，首先TCP是一项传输层的通信协议，其次什么是面向连接的、可靠的和基于字节流的特点。那么什么是传输层？什么是通信协议？是否有面向非连接的、不可靠的和基于非字节流的通信协议呢？我们一个一个地开始讲。

TCP什么作用呢？
TCP处于传输层，接收来自应用层的数据，并将数据分成几个适当长度的报文段，之后将结果传递给IP层。在这一过程中，TCP要干三件事情：给每个报文段编号；确定一个往返时延保，在往返时延内接收到ACK，表示传递成功，否则重传；用校验和函数来计算数据的校验和，若发送和接收校验和相等时，说明传递成功，否则传递失败。

TCP三次握手开启连接和四次握手关闭链接。
三次握手：SYN->ACK->ACK
四次握手: FIN->ACK->FIN->ACK
之所以会四次握手是因为：TCP是半关闭的(half close)造成的。TCP是全双工的，关闭需要正向和逆向都关闭。


⭐️UDP是什么？
UDP全称是：User datagram protocol 用户数据报协议，，是一种无连接的、将数据发送完之后不管它能否到达的传输层协议。适用于小流量传输。使用场景有很多，如音频视频的传输，QQ视频聊天也是用UDP。

⭐️HTTP是什么？
http(超文本传输协议)是一个介于请求和响应模式的应用层协议，并具有无状态的特点。



传输层（Transport Layer）是ISO OSI协议的第四层协议，实现端到端的数据传输。

DNS域名系统在应用层。


额外的知识点补充：OSI是计算机网络通信的基本框架，共有7层，分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层，由于会话层和表示层用到的不多，所以7层也可以简化成5层，即物理层、数据链路层、网络层、传输层和应用层。

那么他们是什么，负责的功能是什么，以及他们是如何共同协作完成网络通信的呢？又要一层一层的分析（好痛苦，但痛苦之后就不需要为每次碰到新概念而忧虑了）

物理层是建立数据终端设备之间的物理连接。起到传输媒介的作用。设备和设备之间通过比特流传输(什么是比特流？再见)(bit)
如光纤、同轴电缆、双绞线都是物理层设备。

数据链路层：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。就像是一个将军，指引士兵们(比特流)到达正确的目的地。数据流的控制。(帧)
如交换机、网桥、网卡。

网络层：策略控制。路由协议和地址解析协议（ARP） (数据包) 分时复用
如路由器

4.传输层（Transport Layer）发送接收正确的数据快分组序列，构成传输层数据。数据控制的最后一层。


5.应用层 
应用程序模块
应用程序。

⭐️⭐️⭐️Android Framework简介⭐️⭐️⭐️
从图中，我们能看出来，Framework层提供了丰富的Manager供开发者调用。我们只需要调用相关的API便能实现业务需求。

Framework功能
是一个API库，Android系统开发者提供一些基本功能实现，通过接口供开发者调用。Framework层包含Java实现的代码和JNI实现的代码。Java实现的代码供上层调用，而JNI的代码去调用下层的服务，最终去访问核心库底层的方法，访问linux内核。
这么一来，感觉就是什么叫SDK，什么叫API就明白了。按照道理来说，这些功能都可以由开发者完成，系统开发者只需要提供runtime，供程序run即可，为什么还要多次一举写这么多API呢？因为这些API比较难，并且都是基础功能，所以系统开发者帮我们实现好了。我们只需要调用这些API即可。
不负责任地说，其实只要是常用的功能，能复用的代码都可以做个SDK，这样开发会非常方便。但SDK会相当庞大。这也是为什么有依赖包的原因。

SDK、API、依赖包、应用程序都是一个东西，只不过系统开发者写的叫SDK、API，而大神贡献的叫jar包，而我们自己的工程叫project，还有所谓的aar，应该是一个东西。

另外有一个问题：既然底层都是用C/C++实现的，为什么上层要用Java开发呢？有关专家给出解释是：C/C++过于底层，开发者要花很长时间研究C/C++，才能把它那一套弄清楚，稍不注意，就会忘记开始或释放内存，而Java就比较容易上手，还有GC自动回收内存。所以这也体现了Java这么迅速发展的原因。


Framework层总共包含8个manager
ActivityManager：用来管理应用程序生命周期并提供常用的导航回退功能。
Window Manager：提供一些我们访问手机屏幕的方法。屏幕的透明度、亮度、背景。
ContentProvider：使应用程序可以访问其他应用程序的数据，也可以让其他应用程序访问自己的数据。
Notification Manager：在状态栏中显示提示信息。
Package Manager：提供对安装包的访问。包括安装、查询permission、Application相关信息。
Telephony Manager：主要提供了一系列用于访问与手机通讯相关的状态和信息的方法，查询电信网络状态信息，sim卡的信息等。
Resource Manager：资源访问
Location Manager：位置访问
Sensor Manager：传感器访问












 
 